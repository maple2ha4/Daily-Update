指针与引用的区别:

1.指针是存储变量内存地址的一个变量 引用是一个变量的别名
2.指针可以不进行初始化 而引用必须进行初始化
3.指针可以指向空 而引用不可以指向空
4.指针可以改变指向的对象 而引用一旦绑定后不可以指向其他对象
5.使用指针指向的元素需要解引用操作 而引用不需要
6.指针有多级指针 而引用只有一级引用
7.指针占用单独的地址空间 而引用不需要占用独立的存储空间
8.指针作为参数传参时需要经历拷贝构造和移动拷贝构造 而引用传入的时变量本身


总结:在C++编程中优先使用引用而不是指针 
除非是需要指针来进行new或delete进行内存管理,或者时明确需要指向空的情况下使用指针 
在C++11之后,优先使用智能指针来进行内存管理


针对第8点:
指针与引用在函数传参时的区别：

  a.指针传参 (Pass by Pointer)：
    - 本质：值传递（传递地址值的副本）
    - 过程：函数内部会创建一个新的局部指针变量，接收外部指针值的拷贝
    - 影响：
      - 通过解引用 (*ptr) 可以修改外部指针所指向的原始数据
      - 修改指针本身（改变指向）只会影响函数内的副本，不影响外部指针
    - 示例：
      void func(int* ptr_inside) {
          *ptr_inside = 30;    // 修改外部数据
          ptr_inside = nullptr; // 仅修改内部副本，外部指针不变
      }

  b.引用传参 (Pass by Reference)：
    - 本质：传递变量本身（别名的绑定）
    - 过程：形参的引用直接绑定到实参的原始对象，无拷贝发生
    - 影响：
      - 所有对引用的操作都直接作用于原始变量
      - 引用一旦绑定就不能重新绑定其他变量
    - 示例：
      void func(int& ref_inside) {
          ref_inside = 30; // 直接修改外部变量
          // 无法改变引用的绑定对象
      }

关键区别：
1. 拷贝开销：指针需要拷贝地址值（通常8字节），引用无拷贝
2. 语法简洁性：引用无需取地址(&)和解引用(*)操作
3. 安全性：引用必须绑定有效对象，避免了空指针风险

结论：
优先使用引用传参，因其更高效（无拷贝）、更安全（非空）、更简洁（直接操作）。
