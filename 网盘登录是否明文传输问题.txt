在项目开发初期，为了快速验证登录流程（比如测试 “用户名密码是否正确”“用户是否已注册” 这些基础逻辑），确实短暂用过明文传输 —— 客户端直接把用户名和密码放到登录协议包（比如STRU_LOGIN_RQ结构体）里发出去，这主要是为了减少开发初期的复杂度，专注于核心流程验证。

但我很清楚 “明文传输密码” 的安全风险（比如被抓包后直接泄露用户信息），所以在功能跑通后，已经补充了密码加密传输的逻辑，目前的实现方式是：

客户端加密：用户输入密码后，客户端先用MD5对密码进行哈希处理（比如 “123456”→e10adc3949ba59abbe56e057f20f883e），再把哈希后的字符串放进登录请求包（STRU_LOGIN_RQ的m_szPassword字段），避免明文密码在网络中传输；
服务器验证：服务器端数据库（user表）里存储的也不是明文密码，而是用户注册时就用相同MD5算法哈希后的结果。登录时，服务器只需对比 “客户端传过来的哈希值” 和 “数据库里存储的哈希值” 是否一致，不用解密，既安全又高效；
防抓包补充：后续计划进一步优化，比如在MD5基础上加入 “盐值”（随机字符串）—— 客户端加密时用 “密码 + 盐值” 哈希（盐值可以是服务器在注册时返回的随机串，每个用户不同），即使两个用户密码相同，哈希结果也不同，能防止 “彩虹表破解”（这部分逻辑已在代码里预留了接口，还没完全实现）。

简单说：初期为了调试用了明文，但这只是开发阶段的临时状态，核心功能稳定后已经通过 “客户端哈希加密 + 服务器哈希比对” 解决了明文传输的安全问题，后续还会加 “盐值” 进一步增强安全性，确保用户密码在传输和存储环节都不会泄露。
