用const和#define定义常量哪个更好？

推荐使用const定义常量，主要原因如下：

1. 类型安全检查
   - #define：宏定义是简单的文本替换，没有类型概念，不进行类型检查，容易产生边际错误
   - const：有明确的类型，编译时会进行类型检查，更安全

2. 调试支持
   - #define：预处理阶段展开，无法调试宏定义
   - const：在编译阶段处理，可以进行调试

3. 作用域控制
   - #define：没有作用域概念，全局有效，容易造成命名冲突
   - const：有作用域，可以定义在命名空间、类或函数内部

4. 内存使用
   - #define：不分配内存，存储在代码段
   - const：分配内存，存储在数据段，但编译器可能进行优化

5. 使用场景
   - 使用const：定义有类型要求的常量
   - 使用#define：需要条件编译、字符串拼接等特殊场景

typedef与#define的区别

1. 处理阶段
   - typedef：编译阶段处理，有类型检查
   - #define：预处理阶段，纯文本替换

2. 作用域
   - typedef：有作用域限制
   - #define：全局有效，无作用域

3. 指针操作
   typedef int * pint;
   #define PINT int *
   
   const pint p1;    // int *const p1 (指针本身不可变)
   const PINT p2;    // const int *p2 (指向的内容不可变)

#include<>和#include""的区别

1. #include<>
   - 查找标准库头文件
   - 在编译器设置的include路径中搜索
   - 用于包含系统头文件

2. #include""
   - 首先在当前源文件目录查找
   - 如果找不到，再到编译器include路径查找
   - 用于包含用户自定义头文件

总结：优先使用const定义常量，仅在需要宏特性时使用#define
