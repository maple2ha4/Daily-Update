事件(Event)是什么?

在事件驱动编程中，事件（Event）是程序运行过程中发生的 "可被感知的动作或状态变化"，它是触发后续处理逻辑的 "信号"。
简单来说，事件就是 "发生了什么事"，比如：
  用户点击了鼠标（鼠标事件）、键盘按下了某个键（键盘事件）、网络中有数据到达（网络事件）、一个定时器到点了（定时事件）、文件读取完成（I/O 事件）、程序发生错误（错误事件）；

事件通常包含两部分关键信息：
事件类型：比如是 "鼠标点击" 还是 "数据到达"
事件数据：与事件相关的具体信息（比如鼠标点击的坐标、网络接收的数据内容）
在 C++ 等语言的事件驱动框架中，事件可能被封装成一个结构体类，例如：

// 事件的简化示例
struct Event {
    enum Type {  // 事件类型
        MOUSE_CLICK,
        KEY_PRESS,
        NETWORK_DATA,
        TIMER_EXPIRE
    };

    Type type;         // 事件类型
    void* data;        // 事件相关数据（根据类型不同而不同）
    int timestamp;     // 事件发生时间
};

这些事件会被收集到一个事件队列中，然后由 Event Loop 按顺序取出并处理。
正因为事件是 "离散发生" 的，且大部分事件处理之间可以异步进行（比如等待网络响应时可以处理其他事件），才使得单线程的 Event Loop 能高效处理多个任务。
比如在 Web 服务器中，"客户端发起连接请求" 就是一个事件，Event Loop 收到这个事件后，就会调用对应的处理器（比如建立连接的函数）来处理。
