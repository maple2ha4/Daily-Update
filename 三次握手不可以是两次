TCP三次握手的设计是为了**确保连接双方都能可靠地收发数据**，并避免“过期连接请求”“资源浪费”等问题。如果简化为两次握手，会导致严重的可靠性漏洞和资源风险，核心原因如下：


### 一、两次握手无法确认“客户端能正常接收数据”
TCP连接的核心是“双向通信”——不仅要确认“客户端能发、服务器能收”，还要确认“服务器能发、客户端能收”。三次握手的每一步都在验证单向通信能力，而两次握手会缺失关键验证：

- **三次握手的验证逻辑**：  
  1. 第一次握手（客户端→服务器，SYN）：验证“客户端能发，服务器能收”；  
  2. 第二次握手（服务器→客户端，SYN+ACK）：验证“服务器能发，客户端能收”（客户端收到服务器的报文，证明自己能收）；  
  3. 第三次握手（客户端→服务器，ACK）：验证“客户端能发，服务器能收”（服务器收到客户端的确认，证明自己能收）。  

- **若改为两次握手**：  
  服务器收到客户端的SYN后，直接进入“连接建立”状态并开始发送数据，但此时**服务器无法确认“客户端是否能收到自己的报文”**（客户端可能因网络故障没收到服务器的SYN+ACK）。  
  结果：服务器以为连接已建立，持续发送数据，但客户端根本没准备好接收，导致数据全部丢失，且服务器会一直占用资源等待确认，造成浪费。


### 二、两次握手会导致“历史过期连接”干扰新连接
网络中可能存在“延迟的过期SYN报文”（例如：客户端之前发送的SYN因网络拥堵延迟，客户端已超时重发并建立新连接，而旧的SYN很久后才到达服务器）。三次握手能天然过滤这种干扰，而两次握手无法避免：

- **三次握手如何过滤过期连接**：  
  假设客户端曾发送过一个过期SYN（seq=100），延迟后到达服务器：  
  1. 服务器收到后返回SYN+ACK（seq=200，ack=101）；  
  2. 客户端发现这个SYN+ACK对应的是“已过期的旧连接”，会忽略它，不发送第三次ACK；  
  3. 服务器等待不到第三次ACK，超时后释放资源，不会建立无效连接。  

- **若改为两次握手**：  
  服务器收到过期SYN后，直接建立连接并开始发送数据，但客户端认为这是无效连接，不会处理数据。  
  结果：服务器持续向“不存在的有效连接”发送数据，浪费CPU、内存和带宽资源，甚至可能因大量过期连接耗尽服务器资源（类似DoS攻击）。


### 三、两次握手无法同步双方序列号（ISN）
TCP通过“初始序列号（ISN）”确保数据有序传输和去重，三次握手的核心是**双向同步ISN**：  
- 客户端在第一次握手发送自己的ISN；  
- 服务器在第二次握手发送自己的ISN，并确认客户端的ISN；  
- 客户端在第三次握手确认服务器的ISN。  

若改为两次握手，客户端无法向服务器确认“已收到服务器的ISN”，服务器不确定客户端是否知晓自己的序列号，后续数据传输时可能因序列号不匹配导致数据被丢弃（接收方会认为是无效数据）。


### 总结：三次握手是“可靠性”与“效率”的最优解
两次握手的问题本质是“缺少客户端对服务器的最终确认”，导致：  
1. 服务器无法确认客户端的接收能力，数据可能丢失；  
2. 无法过滤过期连接，导致资源浪费；  
3. 无法双向同步序列号，影响数据传输可靠性。  

三次握手通过“客户端最后一次确认”，完美解决了这些问题，虽然比两次握手多一次交互，但为TCP的“可靠传输”奠定了基础，是经过长期实践验证的最优设计。
